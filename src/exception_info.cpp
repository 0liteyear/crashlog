
#include "exception_info.h"

#include <windows.h>

#include <map>
#include <optional>
#include <system_error>

using namespace crashlog;

Address crashlog::parseAddress(void* rawAddress) {
	return {
		rawAddress,
		""};
};

std::optional<std::string> crashlog::parseExceptionCode(DWORD exCode) {
	std::map<DWORD, std::string> exceptions = {
		{EXCEPTION_ACCESS_VIOLATION, "EXCEPTION_ACCESS_VIOLATION"},
		{EXCEPTION_ARRAY_BOUNDS_EXCEEDED, "EXCEPTION_ARRAY_BOUNDS_EXCEEDED"},
		{EXCEPTION_BREAKPOINT, "EXCEPTION_BREAKPOINT"},
		{EXCEPTION_DATATYPE_MISALIGNMENT, "EXCEPTION_DATATYPE_MISALIGNMENT"},
		{EXCEPTION_FLT_DENORMAL_OPERAND, "EXCEPTION_FLT_DENORMAL_OPERAND"},
		{EXCEPTION_FLT_DIVIDE_BY_ZERO, "EXCEPTION_FLT_DIVIDE_BY_ZERO"},
		{EXCEPTION_FLT_INEXACT_RESULT, "EXCEPTION_FLT_INEXACT_RESULT"},
		{EXCEPTION_FLT_INVALID_OPERATION, "EXCEPTION_FLT_INVALID_OPERATION"},
		{EXCEPTION_FLT_OVERFLOW, "EXCEPTION_FLT_OVERFLOW"},
		{EXCEPTION_FLT_STACK_CHECK, "EXCEPTION_FLT_STACK_CHECK"},
		{EXCEPTION_FLT_UNDERFLOW, "EXCEPTION_FLT_UNDERFLOW"},
		{EXCEPTION_ILLEGAL_INSTRUCTION, "EXCEPTION_ILLEGAL_INSTRUCTION"},
		{EXCEPTION_IN_PAGE_ERROR, "EXCEPTION_IN_PAGE_ERROR"},
		{EXCEPTION_INT_DIVIDE_BY_ZERO, "EXCEPTION_INT_DIVIDE_BY_ZERO"},
		{EXCEPTION_INT_OVERFLOW, "EXCEPTION_INT_OVERFLOW"},
		{EXCEPTION_INVALID_DISPOSITION, "EXCEPTION_INVALID_DISPOSITION"},
		{EXCEPTION_NONCONTINUABLE_EXCEPTION, "EXCEPTION_NONCONTINUABLE_EXCEPTION"},
		{EXCEPTION_PRIV_INSTRUCTION, "EXCEPTION_PRIV_INSTRUCTION"},
		{EXCEPTION_SINGLE_STEP, "EXCEPTION_SINGLE_STEP"},
		{EXCEPTION_STACK_OVERFLOW, "EXCEPTION_STACK_OVERFLOW"}};

	if (!exceptions.contains(exCode)) {
		return std::optional<std::string>();
	}
	return exceptions[exCode];
};

std::string crashlog::parseViolationType(AccessViolationType type) {
	switch (type) {
		case crashlog::AccessViolationType::READ_ACCESS_VIOLATION: {
			return "READ_ACCESS_VIOLATION";
		}
		case crashlog::AccessViolationType::WRITE_ACCESS_VIOLATION: {
			return "WRITE_ACCESS_VIOLATION";
		}
		case crashlog::AccessViolationType::DEP_ACCESS_VIOLATION: {
			return "DEP_ACCESS_VIOLATION";
		}
		default:
			return "INVALID_VIOLATION_TYPE";
	}
}
